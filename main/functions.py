
"""
this file has all the functions that are used in the project to detect vehicle
The functions are drived from coursework exercises.
The following functions are implemented here:
    1. convert_color_bgr : convert color space from bgr to others --> image read using cv2.imread
    
    2. convert_color_rgb : convert color space from rgb to others --> image read using matplotlib.image.imread
    
    3. draw_boxes: takes in bounding boxes and draws them on image
    
    4. plot3d: plot 3d image, used for color space exploration
    
    5. color_hist: histogram of color in given colorspace, bins and range for binning is passed as argument
    reading png using mpimg.imread() generates pixel values between 0-1 in RGB, so bin range needs to be taken care of, although converting to
    another color space using cvtColor changes the range to 0-255, so if raw RGB is not used, things would be fine. 
    jpg though is read as 0-255 in mpimg.imread()
    
    6. bin_spatial: features based on spatial binning, the image is resized to reduce feature array. 
    input image is assumed to be in appropriate colorspace
    
    7. get_hog_features: generates hog features, expects single channel(or gray) image
    orientation bin count,pix_per_cell,cell_per_block and generate hog image or feature vector params
    can be passed as args
    
    8. extract_features: this function uses above three functions and based on switches spatial_feat,
    hist_feat,hog_feat generates a concatenated feature set based on these methods
    
    9. slide_window: this function generates bounding boxes of rectangle shape of size xy_window between
    x_start_stop and y_start_stop with overlap factor of xy_overlap
    
    10. single_img_features: extracts features in a given window (window list generated by slide_window)
    
    11. search_windows: uses single_img_features function to loop on all the windows generated by
        slide_window function and generates a bbox list for all vehicle matched/predicted windows,
        the above three function are not used as they are not efficient, find_cars (next) is used in pipeline
    
    12. find_cars: implements hog subsampling based sliding window
    
    13. add_heat: generates heat map based on overlap in vecles match detected using slide_windows or find_cars functions
    
    14. apply_threshold: apply threshold on the heat map image to remove false positives
    
    15. draw_labeled_bboxes : this function uses sk labels method to extract match and bbox for those matches on heatmap image
   
@author: atpandey
"""
##############################
#imports
from skimage.feature import hog
from sklearn.svm import LinearSVC
from sklearn.preprocessing import StandardScaler
# for scikit-learn >= 0.18 use:
from sklearn.model_selection import train_test_split
# from sklearn.cross_validation import train_test_split
from scipy.ndimage.measurements import label
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
from moviepy.editor import VideoFileClip
from IPython.display import HTML
import numpy as np
import pickle
import cv2
import glob
import time

#######################
#color space conversion
def convert_color_bgr(img,color_space='BGR'):
    '''
    this functions takes in a BGR Image and converts it to specified color space
    cv2.imread returns BGR colorspace
    '''
    # Convert image to new color space (if specified,else return image as is)
    #Assumes input image is BGR format
    if color_space !='BGR':
        if color_space=='RGB':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        if color_space=='HSV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        elif color_space=='YUV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2YUV)
        elif color_space=='LAB':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2Lab)
        elif color_space=='HLS':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2HLS)
        elif color_space=='YCrCb':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2YCrCb)
        elif color_space=='LUV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_BGR2LUV)
    else: 
        feature_image = np.copy(img)
    return feature_image

def convert_color_rgb(img,color_space='RGB'):
    '''
    this functions takes in a RGB Image and converts it to specified color space
    matplotlib.image.immread imread returns BGR colorspace
    '''
    # Convert image to new color space (if specified,else return image as is)
    #Assumes input image is BGR format
    if color_space !='RGB':
        if color_space=='BGR':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2BGR)
        if color_space=='HSV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2HSV)
        elif color_space=='YUV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2YUV)
        elif color_space=='LAB':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2Lab)
        elif color_space=='HLS':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2HLS)
        elif color_space=='YCrCb':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2YCrCb)
        elif color_space=='LUV':
            feature_image=cv2.cvtColor(img,cv2.COLOR_RGB2LUV)
    else: 
        feature_image = np.copy(img)
    return feature_image
##############################################
#plotting functions
#draw bboxes
def draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):
    # Make a copy of the image
    imcopy = np.copy(img)
    # Iterate through the bounding boxes
    for bbox in bboxes:
        # Draw a rectangle given bbox coordinates
        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)
    # Return the image copy with boxes drawn
    return imcopy
################################################


#3d Plot
from mpl_toolkits.mplot3d import Axes3D

def plot3d(pixels, colors_rgb,
        axis_labels=list("RGB"), axis_limits=((0, 255), (0, 255), (0, 255))):
    """Plot pixels in 3D."""

    # Create figure and 3D axes
    fig = plt.figure(figsize=(8, 8))
    ax = Axes3D(fig)

    # Set axis limits
    ax.set_xlim(*axis_limits[0])
    ax.set_ylim(*axis_limits[1])
    ax.set_zlim(*axis_limits[2])

    # Set axis labels and sizes
    ax.tick_params(axis='both', which='major', labelsize=14, pad=8)
    ax.set_xlabel(axis_labels[0], fontsize=16, labelpad=16)
    ax.set_ylabel(axis_labels[1], fontsize=16, labelpad=16)
    ax.set_zlabel(axis_labels[2], fontsize=16, labelpad=16)

    # Plot pixel values with colors given in colors_rgb
    ax.scatter(
        pixels[:, :, 0].ravel(),
        pixels[:, :, 1].ravel(),
        pixels[:, :, 2].ravel(),
        c=colors_rgb.reshape((-1, 3)), edgecolors='none')

    return ax  # return Axes3D object for further manipulation





############################################
#feature generation function


#color histogram generation
# Define a function to compute color histogram features 
# NEED TO CHANGE bins_range if reading .png files with mpimg!
def color_hist(img, nbins=32, bins_range=(0, 256)):
    # Compute the histogram of the RGB channels separately
    rhist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)
    ghist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)
    bhist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)
    # Generating bin centers
    bin_edges = rhist[1]
    bin_centers = (bin_edges[1:]  + bin_edges[0:len(bin_edges)-1])/2
    # Concatenate the histograms into a single feature vector
    hist_features = np.concatenate((rhist[0], ghist[0], bhist[0]))
    # Return the individual histograms, bin_centers and feature vector
    return rhist, ghist, bhist, bin_centers, hist_features

################################################

#spatial binning
# Define a function to compute binned color features  
def bin_spatial(img, size=(32, 32)):
    # Use cv2.resize().ravel() to create the feature vector
    features = cv2.resize(img, size,interpolation=cv2.INTER_NEAREST).ravel() 
    # Return the feature vector
    return features
######################
# hog features
# Define a function to return HOG features and visualization
def get_hog_features(img, orient, pix_per_cell, cell_per_block, 
                        vis=False, feature_vec=True,transform_sqrt=False):
    # Call with two outputs if vis==True
    if vis == True:
        features, hog_image = hog(img, orientations=orient, 
                                  pixels_per_cell=(pix_per_cell, pix_per_cell),
                                  cells_per_block=(cell_per_block, cell_per_block), 
                                  transform_sqrt=transform_sqrt, block_norm='L2-Hys',
                                  visualise=vis, feature_vector=feature_vec)
        return features, hog_image
    # Otherwise call with one output
    else:      
        features = hog(img, orientations=orient, 
                       pixels_per_cell=(pix_per_cell, pix_per_cell),
                       cells_per_block=(cell_per_block, cell_per_block), 
                       transform_sqrt=transform_sqrt, block_norm='L2-Hys',
                       visualise=vis, feature_vector=feature_vec)
        return features

####################################
#function to extract features based on switches to enable
#color hist,spatial binning or hog 
# Define a function to extract features from a list of images
# Have this function call bin_spatial() and color_hist()
def extract_features(imgs, color_space='RGB', spatial_size=(32, 32),
                        hist_bins=32, orient=9, 
                        pix_per_cell=8, cell_per_block=2, hog_channel=0,
                        spatial_feat=True, hist_feat=True, hog_feat=True,axt=None):
    # Create a list to append feature vectors to
    features = []
    ctr=0
    # Iterate through the list of images
    for file in imgs:
        file_features = []
        # Read in each one by one
        ######################################
        #image = mpimg.imread(file)
        #cimg = cv2.imread(file)
        #image=convert_color(cimg,color_space='RGB')
        # apply color conversion if other than 'RGB'
        #if color_space != 'RGB':
        #    if color_space == 'HSV':
        #        feature_image =convert_color(cimg,color_space='HSV')
        #    #elif color_space == 'LUV':
        #    #    feature_image =convert_color(cimg,color_space='LUV')
        #    #elif color_space == 'HLS':
        #    #    feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)
        #    elif color_space == 'YUV':
        #        feature_image =convert_color(cimg,color_space='YUV')
        #    elif color_space == 'YCrCb':
        #        feature_image =convert_color(cimg,color_space='YCrCb')
        #else: feature_image = np.copy(image) 
        #############################################
        
        image = mpimg.imread(file)
        # apply color conversion if other than 'RGB'
        if color_space != 'RGB':
            if color_space == 'HSV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
            elif color_space == 'LUV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)
            elif color_space == 'HLS':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)
            elif color_space == 'YUV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)
            elif color_space == 'YCrCb':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb)
        else: feature_image = np.copy(image)  
     

        if spatial_feat == True:
            spatial_features = bin_spatial((feature_image*255).astype(np.uint8), size=spatial_size)
            file_features.append(spatial_features)
            if ctr==0:
                axt[0].plot(spatial_features)
        if hist_feat == True:
            # Apply color_hist()
            rh,gh,bh,bincen,hist_features = color_hist((feature_image*255).astype(np.uint8), nbins=hist_bins)
            if ctr==0:
                axt[1].bar(bincen,rh[0])
            
            #rh, gh, bh, bincen, feature_vec = color_hist(img, nbins=32, bins_range=(br[0], br[1]))
            file_features.append(hist_features)
        if hog_feat == True:
        # Call get_hog_features() with vis=False, feature_vec=True
            if hog_channel == 'ALL':
                hog_features = []
                for channel in range(feature_image.shape[2]):
                    #for plot's sake
#                    hog_features.append(get_hog_features(feature_image[:,:,channel], 
#                                        orient, pix_per_cell, cell_per_block, 
#                                        vis=False, feature_vec=True))
                    #can't plot hog as vis=False
                    if ctr==0 and channel==2:
                        hf,him=get_hog_features(feature_image[:,:,channel], 
                                        orient, pix_per_cell, cell_per_block, 
                                        vis=True, feature_vec=True)
                        hog_features.append(hf)
                        axt[2].imshow(him)
                    else:
                        hog_features.append(get_hog_features(feature_image[:,:,channel], 
                                        orient, pix_per_cell, cell_per_block, 
                                        vis=False, feature_vec=True))
                        
                hog_features = np.ravel(hog_features)        
            else:
                hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, 
                            pix_per_cell, cell_per_block, vis=False, feature_vec=True)
            # Append the new feature vector to the features list
            file_features.append(hog_features)
        features.append(np.concatenate(file_features))
        ctr +=1
    # Return list of feature vectors
    return features
######################################################
#functions used for vehicle detection
#generate sliding windows on images
# Define a function that takes an image,
# start and stop positions in both x and y, 
# window size (x and y dimensions),  
# and overlap fraction (for both x and y)
def slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], 
                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):
    # If x and/or y start/stop positions not defined, set to image size
    if x_start_stop[0] == None:
        x_start_stop[0] = 0
    if x_start_stop[1] == None:
        x_start_stop[1] = img.shape[1]
    if y_start_stop[0] == None:
        y_start_stop[0] = 0
    if y_start_stop[1] == None:
        y_start_stop[1] = img.shape[0]
    # Compute the span of the region to be searched    
    xspan = x_start_stop[1] - x_start_stop[0]
    yspan = y_start_stop[1] - y_start_stop[0]
    # Compute the number of pixels per step in x/y
    nx_pix_per_step = np.int(xy_window[0]*(1 - xy_overlap[0]))
    ny_pix_per_step = np.int(xy_window[1]*(1 - xy_overlap[1]))
    # Compute the number of windows in x/y
    nx_buffer = np.int(xy_window[0]*(xy_overlap[0]))
    ny_buffer = np.int(xy_window[1]*(xy_overlap[1]))
    nx_windows = np.int((xspan-nx_buffer)/nx_pix_per_step) 
    ny_windows = np.int((yspan-ny_buffer)/ny_pix_per_step) 
    # Initialize a list to append window positions to
    window_list = []
    # Loop through finding x and y window positions
    # Note: you could vectorize this step, but in practice
    # you'll be considering windows one by one with your
    # classifier, so looping makes sense
    for ys in range(ny_windows):
        for xs in range(nx_windows):
            # Calculate window position
            startx = xs*nx_pix_per_step + x_start_stop[0]
            endx = startx + xy_window[0]
            starty = ys*ny_pix_per_step + y_start_stop[0]
            endy = starty + xy_window[1]
            
            # Append window position to list
            window_list.append(((startx, starty), (endx, endy)))
    # Return the list of windows
    return window_list

#########################################
#function to search for features in single window
# Define a function to extract features from a single image window
# This function is very similar to extract_features()
# just for a single image rather than list of images
def single_img_features(img, color_space='RGB', spatial_size=(32, 32),
                        hist_bins=32, orient=9, 
                        pix_per_cell=8, cell_per_block=2, hog_channel=0,
                        spatial_feat=True, hist_feat=True, hog_feat=True):    
    #1) Define an empty list to receive features
    img_features = []
    #2) Apply color conversion if other than 'RGB'
    if color_space != 'RGB':
        if color_space == 'HSV':
            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        elif color_space == 'LUV':
            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)
        elif color_space == 'HLS':
            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)
        elif color_space == 'YUV':
            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)
        elif color_space == 'YCrCb':
            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)
    else: feature_image = np.copy(img)      
    #3) Compute spatial features if flag is set
    if spatial_feat == True:
        spatial_features = bin_spatial(feature_image, size=spatial_size)
        #4) Append features to list
        img_features.append(spatial_features)
    #5) Compute histogram features if flag is set
    if hist_feat == True:
        hist_features = color_hist(feature_image, nbins=hist_bins)
        #6) Append features to list
        img_features.append(hist_features)
    #7) Compute HOG features if flag is set
    if hog_feat == True:
        if hog_channel == 'ALL':
            hog_features = []
            for channel in range(feature_image.shape[2]):
                hog_features.extend(get_hog_features(feature_image[:,:,channel], 
                                    orient, pix_per_cell, cell_per_block, 
                                    vis=False, feature_vec=True))      
        else:
            hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, 
                        pix_per_cell, cell_per_block, vis=False, feature_vec=True)
        #8) Append features to list
        img_features.append(hog_features)

    #9) Return concatenated array of features
    return np.concatenate(img_features)
########################################
# Define a function you will pass an image 
# and the list of windows to be searched (output of slide_windows())
#uses single_img_features on windows found from slide windows
#not optimal --> find_cars that uses hog sub sampling is more efficient
def search_windows(img, windows, clf, scaler, color_space='RGB', 
                    spatial_size=(32, 32), hist_bins=32, 
                    hist_range=(0, 256), orient=9, 
                    pix_per_cell=8, cell_per_block=2, 
                    hog_channel=0, spatial_feat=True, 
                    hist_feat=True, hog_feat=True):

    #1) Create an empty list to receive positive detection windows
    on_windows = []
    #2) Iterate over all windows in the list
    for window in windows:
        #3) Extract the test window from original image
        test_img = cv2.resize(img[window[0][1]:window[1][1], window[0][0]:window[1][0]], (64, 64))      
        #4) Extract features for that window using single_img_features()
        features = single_img_features(test_img, color_space=color_space, 
                            spatial_size=spatial_size, hist_bins=hist_bins, 
                            orient=orient, pix_per_cell=pix_per_cell, 
                            cell_per_block=cell_per_block, 
                            hog_channel=hog_channel, spatial_feat=spatial_feat, 
                            hist_feat=hist_feat, hog_feat=hog_feat)
        print("Feature size:",features.shape)
        #5) Scale extracted features to be fed to classifier
        test_features = scaler.transform(np.array(features).reshape(1, -1))
        #6) Predict using your classifier
        prediction = clf.predict(test_features)
        #7) If positive (prediction == 1) then save the window
        if prediction == 1:
            on_windows.append(window)
    #8) Return windows for positive detections
    return on_windows

#########################################
#find cars --> applies hog subsampling to sliding windows method
# Define a single function that can extract features using hog sub-sampling and make predictions
def find_cars(img, ystart, ystop, scale, cspace, hog_channel, svc, X_scaler, orient, 
              pix_per_cell, cell_per_block, spatial_size, hist_bins,
              spatial_feat=True,hist_feat=True,
              axfc=None,show_scalar=True):
    
    # detected bounding boxes
    bbox = []
    
    ctrfc=0
    #keep a copy of orig image for color_histogram
    img_orig=np.copy(img)
    
    #scale
    img = img.astype(np.float32)/255
    
    img_tosearch = img[ystart:ystop,:,:]

    # apply color conversion if other than 'RGB'
    if cspace != 'RGB':
        if cspace == 'HSV':
            ctrans_tosearch = cv2.cvtColor(img_tosearch, cv2.COLOR_RGB2HSV)
        elif cspace == 'LUV':
            ctrans_tosearch = cv2.cvtColor(img_tosearch, cv2.COLOR_RGB2LUV)
        elif cspace == 'HLS':
            ctrans_tosearch = cv2.cvtColor(img_tosearch, cv2.COLOR_RGB2HLS)
        elif cspace == 'YUV':
            ctrans_tosearch = cv2.cvtColor(img_tosearch, cv2.COLOR_RGB2YUV)
        elif cspace == 'YCrCb':
            ctrans_tosearch = cv2.cvtColor(img_tosearch, cv2.COLOR_RGB2YCrCb)
    else: ctrans_tosearch = np.copy(image)   
    
    #ctrans_tosearch=convert_color(img_tosearch,color_space=cspace)
    
    # rescale image if other than 1.0 scale
    if scale != 1:
        imshape = ctrans_tosearch.shape
        ctrans_tosearch = cv2.resize(ctrans_tosearch, (np.int(imshape[1]/scale), np.int(imshape[0]/scale)),cv2.INTER_CUBIC)
    
    # select colorspace channel for HOG 
    if hog_channel == 'ALL':
        ch1 = ctrans_tosearch[:,:,0]
        ch2 = ctrans_tosearch[:,:,1]
        ch3 = ctrans_tosearch[:,:,2]
    else: 
        ch1 = ctrans_tosearch[:,:,hog_channel]

    # Define blocks and steps as above
    nxblocks = (ch1.shape[1] // pix_per_cell)+1  
    nyblocks = (ch1.shape[0] // pix_per_cell)+1   
    #nxblocks = (ch1.shape[1] // pix_per_cell) - cell_per_block + 1
    #nyblocks = (ch1.shape[0] // pix_per_cell) - cell_per_block + 1 
    nfeat_per_block = orient*cell_per_block**2
    # 64 was the orginal sampling rate, with 8 cells and 8 pix per cell
    window = 64
    nblocks_per_window = (window // pix_per_cell)-1
    #nblocks_per_window = (window // pix_per_cell) - cell_per_block + 1
    cells_per_step = 2  # Instead of overlap, define how many cells to step
    nxsteps = (nxblocks - nblocks_per_window) // cells_per_step
    nysteps = (nyblocks - nblocks_per_window) // cells_per_step
    #nxsteps = (nxblocks - nblocks_per_window) // cells_per_step + 1
    #nysteps = (nyblocks - nblocks_per_window) // cells_per_step + 1
    
    # Compute individual channel HOG features for the entire image
    hog1 = get_hog_features(ch1, orient, pix_per_cell, cell_per_block, feature_vec=False)   
    if hog_channel == 'ALL':
        hog2 = get_hog_features(ch2, orient, pix_per_cell, cell_per_block, feature_vec=False)
        hog3 = get_hog_features(ch3, orient, pix_per_cell, cell_per_block, feature_vec=False)
    
    for xb in range(nxsteps):
        for yb in range(nysteps):
            ypos = yb*cells_per_step
            xpos = xb*cells_per_step
            # Extract HOG for this patch
            hog_feat1 = hog1[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel()
            if hog_channel == 'ALL':
                hog_feat2 = hog2[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() 
                hog_feat3 = hog3[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() 
                hog_features = np.hstack((hog_feat1, hog_feat2, hog_feat3))
            else:
                hog_features = hog_feat1
            #print("HoG features shape",hog_features.shape)
            xleft = xpos*pix_per_cell
            ytop = ypos*pix_per_cell
            
            
            if spatial_feat:
                # Extract the image patch
                subimg = cv2.resize((ctrans_tosearch[ytop:ytop+window, xleft:xleft+window]*255).astype(np.uint8), (64,64),cv2.INTER_CUBIC)
                spatial_features = bin_spatial(subimg, size=spatial_size)
                if ctrfc==0 and show_scalar:
                    axfc[0].plot(spatial_features)
            if hist_feat:
                # Get color features
                #subimg_unnorm=(subimg*255).astype(np.uint8)
                #hist_features = color_hist(subimg_unnorm, nbins=hist_bins)
                rh,gh,bh,bincen,hist_features = color_hist(subimg, nbins=hist_bins)
                #rh,gh,bh,bincen,hist_features = color_hist((feature_image*255).astype(np.uint8), nbins=hist_bins)
                if ctrfc==0 and show_scalar:
                    axfc[1].bar(bincen,rh[0])
            ctrfc +=1
            # Scale features and make a prediction
            #assumed hog is always enabled, so if spatial and hist are enabled concatenate and scale
            if spatial_feat and hist_feat:
                test_features = X_scaler.transform(np.hstack((spatial_features, hist_features, hog_features)).reshape(1, -1)) 
                test_prediction = svc.predict(test_features)
            if not spatial_feat and not hist_feat:
                test_features = X_scaler.transform(hog_features).reshape(1, -1)
                test_prediction = svc.predict(test_features)
                #test_prediction = svc.predict(hog_features)
                
            if  (not spatial_feat and hist_feat) or ( spatial_feat and not hist_feat):
                print("either only spatial or hist feature is enabled for feature extraction from frame")
                print("Unexpected, check your setting")
                exit()

            
            
            
            if test_prediction == 1:
                xbox_left = np.int(xleft*scale)
                ytop_draw = np.int(ytop*scale)
                win_draw = np.int(window*scale)
                bbox.append(((xbox_left, ytop_draw+ystart),(xbox_left+win_draw,ytop_draw+win_draw+ystart)))
                
    return bbox

##################################
#heat map related functions
#generate heatmap to detected windows
def add_heat(heatmap, bbox_list):
    # Iterate through list of bboxes
    for box in bbox_list:
        # Add += 1 for all pixels inside each bbox
        # Assuming each "box" takes the form ((x1, y1), (x2, y2))
        #print('box is',box)
        
        heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1

    # Return updated heatmap
    return heatmap# Iterate through list of bboxes

###################################
#apply threshold to heatmap
def apply_threshold(heatmap, threshold):
    # Zero out pixels below the threshold
    heatmap[heatmap <= threshold] = 0
    # Return thresholded map
    return heatmap

#####################################
#draw bboxes baased on sk labels function
def draw_labeled_bboxes(img, labels):
    # Iterate through all detected cars
    for car_number in range(1, labels[1]+1):
        # Find pixels with each car_number label value
        nonzero = (labels[0] == car_number).nonzero()
        # Identify x and y values of those pixels
        nonzeroy = np.array(nonzero[0])
        nonzerox = np.array(nonzero[1])
        # Define a bounding box based on min/max x and y
        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))
        # Draw the box on the image
        cv2.rectangle(img, bbox[0], bbox[1], (255,0,0), 5)
    # Return the image
    return img
################################################
# Define a class to store data from video
class Frame_Detect():
    def __init__(self):
        # history of bbox for previous n frames
        self.prev_bbox = []
        self.n_frames=20
        self.nr_cars=[]
        
        
    def add_bbox(self, box):
        self.prev_bbox.append(box)
        if len(self.prev_bbox) > self.n_frames:
            # remove older frame data than self.n_frames
            self.prev_bbox = self.prev_bbox[len(self.prev_bbox)-self.n_frames:]
    def add_bbox_cars(self,box,cars):
        self.prev_bbox.append(box)
        self.nr_cars.appned(cars)
        if len(self.nr_cars) > self.n_frames:
            # remove older frame data than self.n_frames
            self.prev_bbox = self.prev_bbox[len(self.prev_bbox)-self.n_frames:]
            self.nr_cars = self.nr_cars[len(self.nr_cars)-self.n_frames:]
    #check prev 10 frames for finding avg nr of cars, 
    #combined with using only heatmap areas with top nr_cars area
    #will delay the detection for 10 frames but will remove false positives
    def calc_cars(self,nr_cars):
        if nr_cars != (sum(self.nr_cars[:-10])/10):
            return int((sum(self.nr_cars[:-10])/10))
        else:
            return nr_cars








##################################################
##just for fun template matching
# Define a function that takes an image and a list of templates as inputs
# then searches the image and returns the a list of bounding boxes 
# for matched templates
#templist is the list of image with templates
def find_matches(img, template_list):
    # Make a copy of the image to draw on
    img1=img.copy()
    # Define an empty list to take bbox coords
    bbox_list = []
    # Iterate through template list
    for tempname in template_list:
        
        # Read in templates one by one
        templ=mpimg.imread(tempname)
        templ_gray = cv2.cvtColor(templ, cv2.COLOR_BGR2GRAY)
        w, h = templ_gray.shape[::-1]
        # Use cv2.matchTemplate() to search the image
        res = cv2.matchTemplate(img1,templ,eval(method))
        #     using whichever of the OpenCV search methods you prefer
        # Use cv2.minMaxLoc() to extract the location of the best match
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
        # Determine bounding box corners for the match
        top_left = max_loc
        bottom_right = (top_left[0] + w, top_left[1] + h)
        # Return the list of bounding boxes
        bbox_list.append([top_left,bottom_right])
    return bbox_list
method='cv2.TM_CCOEFF_NORMED'